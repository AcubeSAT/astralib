# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    upload_directory: '%kernel.project_dir%/public/uploads/documents'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    Symfony\Component\Ldap\Ldap:
        arguments: ['@Symfony\Component\Ldap\Adapter\ExtLdap\Adapter']
        tags:
            - ldap
    Symfony\Component\Ldap\Adapter\ExtLdap\Adapter:
        arguments:
            -   host: "%env(LDAP_HOST)%"
                port: "%env(LDAP_PORT)%"
                encryption: tls
                options:
                    protocol_version: 3
                    referrals: false

    AstraLib\PDFParser\EventListener:
        tags:
            - { name: kernel.event_listener, event: App\Event\FileUpdatedEvent }

    admin.document:
        class: App\Admin\DocumentAdmin
        arguments: [~, App\Entity\Document, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Document }

    admin.category:
        class: App\Admin\CategoryAdmin
        arguments: [~, App\Entity\Category, App\Controller\Admin\CategoryAdminController]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Category }

    admin.author:
        class: App\Admin\AuthorAdmin
        arguments: [~, App\Entity\Author, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Author }
        public: true

    admin.author_document:
        class: App\Admin\AuthorDocumentAdmin
        arguments: [~, App\Entity\AuthorDocument, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: AuthorDocument }
        public: true

    admin.metadata:
        class: App\Admin\MetadataAdmin
        arguments: [~, App\Entity\Metadata, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: admin, label: Metadata }
        public: true

    admin.version:
        class: App\Admin\VersionAdmin
        arguments: [~, App\Entity\Version, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Version }
        public: true
